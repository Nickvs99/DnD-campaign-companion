{"version":3,"file":"js/views-ImageDocView.78b05cbd.js","mappings":"kNAEKA,IAAI,aAAaC,MAAM,c,oGAA5BC,EAAAA,EAAAA,IAQM,MARNC,EAQM,CANoBC,EAAAA,cAAgBC,EAAAA,iBAAc,WAApDC,EAAAA,EAAAA,IAEiBC,EAAAA,CAAAC,IAAAA,GAAA,C,kBADT,IAAuC,EAAvCC,EAAAA,EAAAA,IAAuCC,EAAAA,CAA5BC,QAAO,KAAOC,a,8BAGZR,EAAAA,eAAiBC,EAAAA,iBAAc,WAApDC,EAAAA,EAAAA,IAAoFI,EAAAA,C,MAA7BC,QAAO,KAAOC,a,6EAYzE,GACIC,KAAM,gBACNC,WAAY,CAAEC,eAAc,aAAEC,SAAQA,EAAAA,YACtCC,MAAO,CACH,IAAO,CACHC,KAAMC,OACNC,UAAU,GAEd,eAAkB,CACdF,KAAMG,QACNC,SAAS,IAGjBC,OACI,MAAO,CACHC,aAAa,EACbC,cAAc,EACdb,YAAa,GACbc,uBAAuBC,EAAAA,EAAAA,eAAc,KAAM,KAEnD,EACAC,UACIC,KAAKC,eACT,EACAC,YACIF,KAAKG,IAAIC,QACTJ,KAAKL,aAAc,CACvB,EAEAU,QAAS,CACLC,sBAGIN,KAAKG,IAAM,IAAII,eACfP,KAAKG,IAAIK,KAAK,MAAOR,KAAKS,KAAK,GAC/BT,KAAKG,IAAIO,OAASJ,UAGd,IAAIK,EAAqBC,KAAKC,IAAIb,KAAKH,uBAAyBiB,KAAKC,MAAQC,GAAW,GAIxF,SAHMC,EAAAA,EAAAA,OAAMN,GAGRX,KAAKL,YACL,OAGJ,IAAIuB,EAAalB,KAAKmB,MAAMD,WACxBE,EAAapB,KAAKqB,cAAcrB,KAAKG,IAAImB,cAE7CJ,EAAWK,YAAYH,GAEvBpB,KAAKJ,cAAe,CAAK,EAG7B,IAAIoB,EAAWF,KAAKC,MACpBf,KAAKG,IAAIqB,OAGTxB,KAAKjB,YAAc,0BACbkC,EAAAA,EAAAA,QAAMnB,EAAAA,EAAAA,eAAc,KAAM,OAGhCE,KAAKjB,YAAc,cACvB,EAEAsC,cAAcI,GAEV,IAAIC,EAAS,IAAIC,UACjB,MAAMC,EAAUF,EAAOG,gBAAgBJ,EAAU,aAEjD,IAAIK,EAAQF,EAAQG,qBAAqB,KAEzC,IAAK,IAAIC,KAAOF,EAGZ,GAAgB,IAAZE,EAAIC,KACR,CAEI,IAAIC,EAAKN,EAAQO,eAAeH,EAAIC,KAAKG,MAAM,IAE/CJ,EAAIK,QAAUC,IACVA,EAAMC,iBACND,EAAME,kBAENN,EAAGO,eAAe,CAACC,SAAU,UAAU,CAE/C,CAGJ,OAAOd,EAAQe,eACnB,I,QCvGR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O,2FCPKzE,MAAM,uB,kFAAXC,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFFwE,EAAAA,EAAAA,GAAoB,OAAdrC,IAAKjC,EAAAA,QAAM,WACjBI,EAAAA,EAAAA,IAAkDmE,EAAAA,CAAtCtC,IAAKjC,EAAAA,OAASwE,gBAAgB,G,gCAS9C,GACIhE,KAAM,eACNC,WAAY,CAAEgE,UAASA,EAAAA,YACvB7D,MAAO,CACH,OAAU,CACNC,KAAMC,OACNC,UAAU,GAEd,OAAU,CACNF,KAAMC,OACNC,UAAU,K,QChBtB,MAAMqD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://dnd-campaign-companion/./src/views/GoogleDocView.vue","webpack://dnd-campaign-companion/./src/views/GoogleDocView.vue?ae0d","webpack://dnd-campaign-companion/./src/views/ImageDocView.vue","webpack://dnd-campaign-companion/./src/views/ImageDocView.vue?4b09"],"sourcesContent":["<template>\r\n\r\n<div ref=\"docWrapper\" class=\"google-doc\">\r\n    \r\n    <CenterToScreen v-if=\"showLoadIcon && centerLoadIcon\">\r\n            <LoadIcon :message=\"this.loadMessage\"/>\r\n    </CenterToScreen>\r\n\r\n    <LoadIcon v-else-if=\"showLoadIcon && !centerLoadIcon\" :message=\"this.loadMessage\" />\r\n\r\n</div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport CenterToScreen from \"@/components/CenterToScreen.vue\";\r\nimport LoadIcon from \"@/components/LoadIcon.vue\";\r\nimport {randomUniform, sleep} from \"@/util.js\";\r\n\r\nexport default {\r\n    name: \"GoogleDocView\",\r\n    components: { CenterToScreen, LoadIcon },\r\n    props: {\r\n        \"src\": {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        \"centerLoadIcon\": {\r\n            type: Boolean,\r\n            default: true,\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            isDestroyed: false,\r\n            showLoadIcon: true,\r\n            loadMessage: \"\",\r\n            maxArtificialLoadTime: randomUniform(2500, 4000),\r\n        };\r\n    },\r\n    mounted() {\r\n        this.loadGoogleDoc();\r\n    },\r\n    unmounted() {\r\n        this.xhr.abort();\r\n        this.isDestroyed = true;\r\n    },\r\n    \r\n    methods: {\r\n        async loadGoogleDoc() {\r\n\r\n\r\n            this.xhr = new XMLHttpRequest();\r\n            this.xhr.open(\"GET\", this.src, true);\r\n            this.xhr.onload = async () => {\r\n\r\n                // Calculate any possible remaining wait time\r\n                let artificialWaitTime = Math.max(this.maxArtificialLoadTime - (Date.now() - sendTime), 0);\r\n                await sleep(artificialWaitTime);\r\n                \r\n                // This component might be destroyed during the delays\r\n                if (this.isDestroyed) {\r\n                    return;\r\n                }\r\n\r\n                let docWrapper = this.$refs.docWrapper;\r\n                let docElement = this.parseResponse(this.xhr.responseText);\r\n\r\n                docWrapper.appendChild(docElement);\r\n\r\n                this.showLoadIcon = false;\r\n            };\r\n\r\n            let sendTime = Date.now();\r\n            this.xhr.send();\r\n\r\n            // Display techy quotes on the load icon\r\n            this.loadMessage = \"Fetching document\";\r\n            await sleep(randomUniform(1500, 2500));\r\n            \r\n            // Final load message\r\n            this.loadMessage = \"Parsing data\";\r\n        },\r\n\r\n        parseResponse(response) {\r\n\r\n            let parser = new DOMParser();\r\n            const htmlDoc = parser.parseFromString(response, \"text/html\");\r\n\r\n            let aTags = htmlDoc.getElementsByTagName(\"a\");\r\n            \r\n            for (let tag of aTags)\r\n            {\r\n                // The hashes do not work, therefore their behaviour is overriden\r\n                if (tag.hash != \"\")\r\n                {\r\n                    // #id => id\r\n                    let el = htmlDoc.getElementById(tag.hash.slice(1));\r\n\r\n                    tag.onclick = event => { \r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                        \r\n                        el.scrollIntoView({behavior: \"smooth\"});\r\n                    };\r\n                }\r\n            }\r\n\r\n            return htmlDoc.documentElement;\r\n        }\r\n    },\r\n};\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n.google-doc {\r\n    width: 100%;\r\n    \r\n    // Overwrite default css applied by google\r\n    :deep(*) {\r\n        color: var(--primary-color) !important;\r\n        background: none !important;\r\n    }\r\n\r\n    :deep(body) {\r\n        margin: 0;\r\n    }\r\n\r\n    :deep(.doc-content) {\r\n        padding: 0;\r\n        max-width: inherit;\r\n    }\r\n}\r\n\r\n</style>","import { render } from \"./GoogleDocView.vue?vue&type=template&id=40a7aa71&scoped=true\"\nimport script from \"./GoogleDocView.vue?vue&type=script&lang=js\"\nexport * from \"./GoogleDocView.vue?vue&type=script&lang=js\"\n\nimport \"./GoogleDocView.vue?vue&type=style&index=0&id=40a7aa71&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\vansa\\\\Persoonlijk\\\\Programmeren\\\\Projects\\\\dnd-campaign-companion\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-40a7aa71\"]])\n\nexport default __exports__","<template>\r\n\r\n<div class=\"image-doc-container\">\r\n    <img :src=\"imgSrc\"/>\r\n    <GoogleDoc :src=\"docSrc\" :centerLoadIcon=\"false\"/>\r\n</div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport GoogleDoc from \"@/views/GoogleDocView.vue\";\r\n\r\nexport default {\r\n    name: \"ImageDocView\",\r\n    components: { GoogleDoc },\r\n    props: {\r\n        \"docSrc\": {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        \"imgSrc\": {\r\n            type: String,\r\n            required: true,\r\n        }\r\n    }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.image-doc-container img {\r\n    margin: 1rem 0;\r\n    width: 100%;\r\n}\r\n\r\n\r\n</style>","import { render } from \"./ImageDocView.vue?vue&type=template&id=4cd1e1e8&scoped=true\"\nimport script from \"./ImageDocView.vue?vue&type=script&lang=js\"\nexport * from \"./ImageDocView.vue?vue&type=script&lang=js\"\n\nimport \"./ImageDocView.vue?vue&type=style&index=0&id=4cd1e1e8&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\vansa\\\\Persoonlijk\\\\Programmeren\\\\Projects\\\\dnd-campaign-companion\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4cd1e1e8\"]])\n\nexport default __exports__"],"names":["ref","class","_createElementBlock","_hoisted_1","$data","$props","_createBlock","_component_CenterToScreen","key","_createVNode","_component_LoadIcon","message","loadMessage","name","components","CenterToScreen","LoadIcon","props","type","String","required","Boolean","default","data","isDestroyed","showLoadIcon","maxArtificialLoadTime","randomUniform","mounted","this","loadGoogleDoc","unmounted","xhr","abort","methods","async","XMLHttpRequest","open","src","onload","artificialWaitTime","Math","max","Date","now","sendTime","sleep","docWrapper","$refs","docElement","parseResponse","responseText","appendChild","send","response","parser","DOMParser","htmlDoc","parseFromString","aTags","getElementsByTagName","tag","hash","el","getElementById","slice","onclick","event","preventDefault","stopPropagation","scrollIntoView","behavior","documentElement","__exports__","render","_createElementVNode","_component_GoogleDoc","centerLoadIcon","GoogleDoc"],"sourceRoot":""}